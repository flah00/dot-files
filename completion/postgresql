# bash completion for Postgresql

have psql && {
_pg_databases()
{
    local pgpass
    COMPREPLY=()
    pgpass=${PGPASS:-~/.pgpass}

    if [ -e $pgpass ]; then
        COMPREPLY=( $(compgen -W "$( awk -F: '{print $3}' $pgpass 2>/dev/null |
            grep -v \*)" -- "$cur" ) )
    fi

    # -w was introduced in 8.4, https://launchpad.net/bugs/164772
    # "Access privileges" in output may contain linefeeds, hence the NF > 1
    if [ -z "$COMPREPLY" ]; then
        COMPREPLY=( $( compgen -W "$( psql -AtqwlF $'\t' 2>/dev/null | \
            awk 'NF > 1 { print $1 }' )" -- "$cur" ) )
    fi
}

_pg_hosts()
{
    local pgpass
    COMPREPLY=()
    pgpass=${PGPASS:-~/.pgpass}

    if [ -e $pgpass ]; then
        COMPREPLY=( $(compgen -W "$( awk -F: '{print $1}' $pgpass 2>/dev/null |
            grep -v \*)" -- "$cur" ) )
    fi

    if [ -z "$COMPREPLY" ]; then
        _known_hosts_real "$cur"
    fi
}

_pg_users()
{
    local pgpass
    COMPREPLY=()
    pgpass=${PGPASS:-~/.pgpass}

    if [ -e $pgpass ]; then
        COMPREPLY=( $(compgen -W "$( awk -F: '{print $4}' $pgpass 2>/dev/null |
            grep -v \*)" -- "$cur" ) )
    fi

    # -w was introduced in 8.4, https://launchpad.net/bugs/164772
    if [ -z "$COMPREPLY" ]; then
        COMPREPLY=( $( compgen -W "$( psql -Atqwc 'select usename from pg_user' \
            template1 2>/dev/null )" -- "$cur" ) )
    fi

    [ ${#COMPREPLY[@]} -eq 0 ] && COMPREPLY=( $( compgen -u -- "$cur" ) )
}

_pg_formats()
{
    COMPREPLY=( $(compgen -W 'c d p t') )
}

# createdb(1) completion
#
_createdb()
{
    local cur prev split=false

    COMPREPLY=()
    _get_comp_words_by_ref cur prev

    _split_longopt && split=true

    case $prev in
        -h|--host)
            _known_hosts_real "$cur"
            return 0
            ;;
        -U|--username|-O|--owner)
            _pg_users
            return 0
            ;;
        -p|--port|-D|--tablespace|-E|--encoding|-T|--template)
            # argument required but no completions available
            return 0
            ;;
        --help|--version)
            # all other arguments are noop with these
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--tablespace --template --encoding --host \
            --port --username --password --echo --quiet --help --version' \
            -- "$cur" ) )
    else
        _pg_databases
    fi
}
complete -F _createdb -o default createdb

# dropdb(1) completion
#
_dropdb()
{
    local cur prev split=false

    COMPREPLY=()
    _get_comp_words_by_ref cur prev

    _split_longopt && split=true

    case $prev in
        -h|--host)
            _known_hosts_real "$cur"
            return 0
            ;;
        -U|--username)
            _pg_users
            return 0
            ;;
        --help|--version)
            # all other arguments are noop with these
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--host --port --username --password \
            --interactive --echo --quiet --help --version' -- "$cur" ) )
    else
        _pg_databases
    fi
}
complete -F _dropdb -o default dropdb

# psql(1) completion
#
_psql()
{
    local cur prev split=false

    COMPREPLY=()
    _get_comp_words_by_ref cur prev

    _split_longopt && split=true

    case $prev in
        -h|--host)
            _pg_hosts
            #_known_hosts_real "$cur"
            return 0
            ;;
        -U|--username)
            _pg_users
            return 0
            ;;
        -d|--dbname)
            _pg_databases
            return 0
            ;;
        -o|--output|-f|--file|-L|--log-file)
            _filedir
            return 0
            ;;
        -c|--command|-F|--field-separator|-p|--port|-P|--pset|\
        -R|--record-separator|-T|--table-attr|-v|--set|--variable)
            # argument required but no completions available
            return 0
            ;;
        -\?|--help|-V|--version)
            # all other arguments are noop with these
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        # return list of available options
        COMPREPLY=( $( compgen -W '--echo-all --no-align --command --dbname \
            --echo-queries --echo-hidden --file --field-separator --host \
            --html --list --log-file --output --port --pset --quiet \
            --record-separator --single-step --single-line --tuples-only \
            --table-attr --username --set --version --password --expanded \
            --no-psqlrc --single-transaction --help' -- "$cur" ) )
    else
        # return list of available databases
        _pg_databases
    fi
}
complete -F _psql psql

# pg_restore(1) completion
#
_pg_restore()
{
    local cur prev split=false

    COMPREPLY=()
    _get_comp_words_by_ref cur prev

    _split_longopt && split=true

    case $prev in
        -h|--host)
            _pg_hosts
            return 0
            ;;
        -U|--username)
            _pg_users
            return 0
            ;;
        -d|--dbname)
            _pg_databases
            return 0
            ;;
        -f|--file)
            _filedir
            return 0
            ;;
        -F|--format)
            _pg_formats
            return 0
            ;;
        -L|--use-list)
            _filedir
            return 0
            ;;
        -l|--list|\
        -a|--clean|\
        -C|--create|\
        -e|--exit-on-error|\
        -I|--index-name|\
        -j|--jobs|\
        -n|--schema|\
        -O|--no-owner|\
        -P|--function|\
        -p|--port|\
        -s|--schema-only|\
        -S|--superuser|\
        -T|--trigger|\
        -x|--no-privileges|\
        --disable-triggers|\
        --use-set-session-authorization|\
        --role|\
        -w|--no-password|\
        -W|--password|\
        -v|--verbose|\
        -V|--version|\
        -\?|--help)
            # argument required but no completions available
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        # return list of available options
        COMPREPLY=( $( compgen -W '--list --clean --create --exit-on-error \
            --index-name --jobs --schema --no-owner \
            --function --port --schema-only \
            --superuser --trigger --no-privileges \
            --no-password --password --verbose \
            --version --help --disable-triggers \
            --use-set-session-authorization --role' \
            -- "$cur" ) )

    else
        # return list of files
        _filedir
    fi
}
complete -F _pg_restore pg_restore

# pg_dump(1) completion
#
_pg_dump()
{
    local cur prev split=false

    COMPREPLY=()
    _get_comp_words_by_ref cur prev

    _split_longopt && split=true

    case $prev in
        -h|--host)
            _pg_hosts
            return 0
            ;;
        -U|--username)
            _pg_users
            return 0
            ;;
        -d|--dbname)
            _pg_databases
            return 0
            ;;
        -f|--file)
            _filedir
            return 0
            ;;
        -F|--format)
            _pg_formats
            return 0
            ;;
        -L|--use-list)
            _filedir
            return 0
            ;;
        -Z|--compress)
            COMPREPLY=($(compgen -W '0 1 2 3 4 5 6 7 8 9'))
            return 0
            ;;

        -a|--data-only|\
        -b|--blobs|\
        -c|--clean|\
        -C|--create|\
        -E|--encoding|\
        -e|--exit-on-error|\
        -j|--jobs|\
        -n|--schema|\
        -N|--exclude-schema|\
        -o|--oids|\
        -O|--no-owner|\
        -p|--port|\
        -s|--schema-only|\
        -S|--superuser|\
        -t|--table|\
        -T|--exclude-table|\
        -x|--no-privileges|\
        -w|--no-password|\
        -W|--password|\
        -v|--verbose|\
        -V|--version|\
        -\?|--help|\
        --role|\
        --binary-upgrade|\
        --column-inserts|\
        --disable-dollar-quoting|\
        --disable-triggers|\
        --exclude-table-data|\
        --inserts|\
        --no-security-labels|\
        --no-synchronized-snapshots|\
        --no-tablespaces|\
        --no-unlogged-table-data|\
        --quote-all-identifiers|\
        --section|\
        --serializable-deferrable|\
        --use-set-session-authorization)

            # argument required but no completions available
            return 0
            ;;
    esac

    $split && return 0

    if [[ "$cur" == -* ]]; then
        # return list of available options
        COMPREPLY=( $( compgen -W '--data-only --blobs --clean --create \
            --encoding --exit-on-error --jobs \
            --schema --exclude-schema --oids \
            --no-owner --port --schema-only \
            --superuser --table --exclude-table \
            --no-privileges --no-password --password \
            --verbose --version --help \
            --role --binary-upgrade --column-inserts \
            --disable-dollar-quoting --disable-triggers \
            --exclude-table-data --inserts \
            --no-security-labels --no-synchronized-snapshots \
            --no-tablespaces --no-unlogged-table-data \
            --quote-all-identifiers --section \
            --serializable-deferrable --use-set-session-authorization' \
            -- "$cur" ) )
    else
        # return list of files
        _pg_databases
    fi
}
complete -F _pg_dump pg_dump

}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
